import { LLMClientFactory, LLMMessage } from './llm-client-factory';
import { CollectedBlogData, CollectedYouTubeData } from './data-collection-engine';
import { BaseRequestInfo } from '../types/common-interfaces';
import { getContentTypeDescription, getReviewTypeDescription } from '../constants/content-options';

export interface BlogSelectionRequest extends Omit<BaseRequestInfo, 'selectedTitle'> {
  targetTitle: string; // selectedTitle ÎåÄÏã† targetTitle ÏÇ¨Ïö©
  blogTitles: CollectedBlogData[];
  youtubeTitles?: CollectedYouTubeData[]; // YouTube Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä
}

export interface SelectedBlogTitle {
  title: string;
  url: string;
  relevanceReason: string;
}

export interface SelectedYouTubeVideo {
  videoId: string; // YouTube videoId
  title: string;
  channelName: string;
  viewCount: number;
  duration: number;
  priority: number;
  relevanceReason: string;
  subscriberCount?: number;
  publishedAt?: string;
  likeCount?: string;
  commentCount?: string;
}

export interface BlogSelectionResult {
  selectedTitles: SelectedBlogTitle[];
  selectedVideos: SelectedYouTubeVideo[]; // YouTube ÏÑ†Î≥Ñ Í≤∞Í≥º Ï∂îÍ∞Ä
}

export class BlogTitleSelector {
  async selectTopBlogs(request: BlogSelectionRequest): Promise<BlogSelectionResult> {
    try {
      const hasYouTube = request.youtubeTitles && request.youtubeTitles.length > 0;
      
      if (hasYouTube) {
        console.log('ü§ñ Ï†ïÎ≥¥ÏöîÏïΩ AIÎ°ú Î∏îÎ°úÍ∑∏ + YouTube ÌÜµÌï© ÏÑ†Î≥Ñ ÏãúÏûë');
      } else {
        console.log('ü§ñ Ï†ïÎ≥¥ÏöîÏïΩ AIÎ°ú ÏÉÅÏúÑ 10Í∞ú Î∏îÎ°úÍ∑∏ ÏÑ†Î≥Ñ ÏãúÏûë');
      }
      
      const informationClient = LLMClientFactory.getInformationClient();
      
      // ÌÜµÌï© ÌîÑÎ°¨ÌîÑÌä∏ ÏÇ¨Ïö© (YouTube Ïú†Î¨¥ ÏûêÎèô ÎåÄÏùë)
      const userPrompt = this.buildIntegratedPrompt(request);
      
      const messages: LLMMessage[] = [
        { role: 'user', content: userPrompt }
      ];
      
      console.log(`ü§ñ [LLM ÏöîÏ≤≠] ${hasYouTube ? 'Î∏îÎ°úÍ∑∏+YouTube ÌÜµÌï©' : 'Î∏îÎ°úÍ∑∏'} ÏÑ†Î≥Ñ ÏöîÏ≤≠`);
      
      const response = await informationClient.generateText(messages);
      
      console.log(`ü§ñ [LLM ÏùëÎãµ] ${hasYouTube ? 'ÌÜµÌï©' : 'Î∏îÎ°úÍ∑∏'} ÏÑ†Î≥Ñ Í≤∞Í≥º Î∞õÏùå`);
      
      // JSON ÏùëÎãµ ÌååÏã± (ÌÜµÌï© ÌååÏÑú ÏÇ¨Ïö©)
      const result = this.parseIntegratedResult(response.content, request.blogTitles, request.youtubeTitles || []);
      
      console.log(`‚úÖ Î∏îÎ°úÍ∑∏ ${result.selectedTitles.length}Í∞ú${hasYouTube ? `, YouTube ${result.selectedVideos.length}Í∞ú` : ''} ÏÑ†Î≥Ñ ÏôÑÎ£å`);
      
      return result;
      
    } catch (error) {
      console.error('Î∏îÎ°úÍ∑∏ Ï†úÎ™© ÏÑ†Î≥Ñ Ïã§Ìå®:', error);
      
      // Ïò§Î•ò Ïãú ÏàúÏúÑÎåÄÎ°ú ÏÉÅÏúÑ 10Í∞ú Î∞òÌôò
      const fallbackResult: BlogSelectionResult = {
        selectedTitles: request.blogTitles.slice(0, 10).map((blog) => ({
          title: blog.title,
          url: blog.url,
          relevanceReason: 'ÏûêÎèô ÏÑ†Î≥Ñ (AI Î∂ÑÏÑù Ïã§Ìå®)'
        })),
        selectedVideos: (request.youtubeTitles || []).slice(0, 10).map((video) => ({
          videoId: video.videoId,
          title: video.title,
          channelName: video.channelName,
          viewCount: video.viewCount,
          duration: video.duration,
          priority: video.priority,
          relevanceReason: 'ÏûêÎèô ÏÑ†Î≥Ñ (AI Î∂ÑÏÑù Ïã§Ìå®)'
        }))
      };
      
      return fallbackResult;
    }
  }

  private buildIntegratedPrompt(request: BlogSelectionRequest): string {
    // Î∏îÎ°úÍ∑∏ Ï†úÎ™©Îì§ ÌÖçÏä§Ìä∏ Íµ¨ÏÑ±
    const blogTitlesText = request.blogTitles.map((blog, index) => 
      `${index + 1}. ${blog.title}`
    ).join('\n');
    
    // YouTube Ï†úÎ™©Îì§ ÌÖçÏä§Ìä∏ Íµ¨ÏÑ± (Ï†úÎ™©Îßå)
    const youtubeTitlesText = request.youtubeTitles?.map((video, index) => 
      `${index + 1}. ${video.title}`
    ).join('\n') || '';
    
    // Î≥¥Ï°∞ÌÇ§ÏõåÎìú ÌÖçÏä§Ìä∏ Ï§ÄÎπÑ
    let subKeywordsText = "";
    let subKeywordsCriteria = "";
    if (request.subKeywords && request.subKeywords.length > 0) {
      const subKeywordsStr = request.subKeywords.join(', ');
      subKeywordsText = `**Î≥¥Ï°∞ ÌÇ§ÏõåÎìú**: ${subKeywordsStr}`;
      subKeywordsCriteria = `6. Î≥¥Ï°∞ ÌÇ§ÏõåÎìú(${subKeywordsStr})ÏôÄ Í¥ÄÎ†®ÏÑ±Ïù¥ ÏûàÎäî ÏΩòÌÖêÏ∏†`;
    }
    
    // ÏΩòÌÖêÏ∏† Ïú†Ìòï ÏÑ§Î™Ö Íµ¨ÏÑ±
    const contentTypeDescription = getContentTypeDescription(request.contentType);
    let contentTypeInfo = `**ÏΩòÌÖêÏ∏† Ïú†Ìòï**: ${request.contentType}`;
    if (contentTypeDescription) {
      contentTypeInfo += ` (${contentTypeDescription})`;
    }
    
    // ÌõÑÍ∏∞ Ïú†Ìòï Ï†ïÎ≥¥ Íµ¨ÏÑ± (ÏûàÎäî Í≤ΩÏö∞)
    let reviewTypeInfo = '';
    if (request.reviewType) {
      const reviewTypeDescription = getReviewTypeDescription(request.reviewType);
      reviewTypeInfo = `\n**ÌõÑÍ∏∞ Ïú†Ìòï**: ${request.reviewType}`;
      if (reviewTypeDescription) {
        reviewTypeInfo += ` (${reviewTypeDescription})`;
      }
    }

    const hasYouTubeData = request.youtubeTitles && request.youtubeTitles.length > 0;
    
    return `"${request.targetTitle}" Ï†úÎ™©ÏúºÎ°ú Î∏îÎ°úÍ∑∏ Í∏ÄÏùÑ ÏûëÏÑ±ÌïòÎ†§Í≥† Ìï©ÎãàÎã§. 
Î∏îÎ°úÍ∑∏ Í∏Ä ÏûëÏÑ±Ïóê ÎèÑÏõÄÏù¥ Îê† ÎßåÌïú ${hasYouTubeData ? 'ÎÑ§Ïù¥Î≤Ñ Î∏îÎ°úÍ∑∏ÏôÄ YouTube ÏòÅÏÉÅÏùÑ' : 'ÎÑ§Ïù¥Î≤Ñ Î∏îÎ°úÍ∑∏Î•º'} ÏÑ†Î≥ÑÌï¥Ï£ºÏÑ∏Ïöî.

**ÌÉÄÍ≤ü Ï†úÎ™©**: ${request.targetTitle}
**Î©îÏù∏ ÌÇ§ÏõåÎìú**: ${request.mainKeyword}
${subKeywordsText}
**Í≤ÄÏÉâ ÌÇ§ÏõåÎìú**: ${request.searchKeyword}
${contentTypeInfo}${reviewTypeInfo}

**ÏÑ†Î≥Ñ Î™©Ï†Å**: 
- Î∏îÎ°úÍ∑∏: Ï∞∏Í≥†Ìï† Íµ¨Ï°∞, Ï†ïÎ≥¥, Í¥ÄÏ†êÏùÑ ÏñªÍ∏∞ ÏúÑÌï®${hasYouTubeData ? '\n- YouTube: ÏûêÎßâÏùÑ Ï∂îÏ∂úÌïòÏó¨ Î∏îÎ°úÍ∑∏ Î≥∏Î¨∏ ÏûëÏÑ±Ïóê ÌôúÏö©Ìï† ÏòàÏ†ï' : ''}

**ÏÑ†Î≥Ñ Í∏∞Ï§Ä**:
1. ÌÉÄÍ≤ü Ï†úÎ™© "${request.targetTitle}"Í≥º Í∞ÄÏû• Ï£ºÏ†úÏ†Å Í¥ÄÎ†®ÏÑ±Ïù¥ ÎÜíÏùÄ ÏΩòÌÖêÏ∏† (ÏµúÏö∞ÏÑ†)
2. Î©îÏù∏ ÌÇ§ÏõåÎìúÏôÄ ÏßÅÏ†ëÏ†ÅÏúºÎ°ú Ïó∞Í¥ÄÎêú ÎÇ¥Ïö©
3. ${request.contentType} Ïú†ÌòïÏóê Ï†ÅÌï©Ìïú Ï†ëÍ∑ºÎ∞©ÏãùÏùò ÏΩòÌÖêÏ∏†${request.reviewType ? ` (${request.reviewType} Í¥ÄÏ†ê)` : ''}
4. Íµ¨Ï≤¥Ï†ÅÏù¥Í≥† Ïã§Ïö©Ï†ÅÏù∏ Ï†ïÎ≥¥Î•º Îã¥Í≥† ÏûàÏùÑ Í≤ÉÏúºÎ°ú ÏòàÏÉÅÎêòÎäî Ï†úÎ™©
5. Ï†ïÎ≥¥ÏÑ± ÏΩòÌÖêÏ∏† Ïö∞ÏÑ† (Î™ÖÎ∞±Ìïú ÏÉÅÌíà ÌåêÎß§ÎÇò ÏóÖÏ≤¥ ÌôçÎ≥¥Í∞Ä ÏïÑÎãå Í≤ΩÏö∞ Ìè¨Ìï®)
${subKeywordsCriteria}

**ÎÑ§Ïù¥Î≤Ñ Î∏îÎ°úÍ∑∏ Ï†úÎ™©Îì§**:
${blogTitlesText}
${hasYouTubeData ? `
**YouTube ÏòÅÏÉÅÎì§**:
${youtubeTitlesText}` : ''}

**Ï∂úÎ†• ÌòïÏãù**:
ÌÉÄÍ≤ü Ï†úÎ™©Í≥ºÏùò Í¥ÄÎ†®ÎèÑÍ∞Ä Í∞ÄÏû• ÎÜíÏùÄ ÏàúÏÑúÎåÄÎ°ú ${hasYouTubeData ? 'Î∏îÎ°úÍ∑∏ 10Í∞ú, YouTube 10Í∞úÎ•º' : 'Î∏îÎ°úÍ∑∏ 10Í∞úÎ•º'} JSON ÌòïÌÉúÎ°ú ÏÑ†Î≥ÑÌï¥Ï£ºÏÑ∏Ïöî.

{
  "selected_blogs": [
    {
      "title": "ÌÉÄÍ≤ü Ï†úÎ™©Í≥º Í∞ÄÏû• Í¥ÄÎ†®ÏÑ± ÎÜíÏùÄ Î∏îÎ°úÍ∑∏ Ï†úÎ™© (1ÏúÑ)",
      "relevance_reason": "ÌÉÄÍ≤ü Ï†úÎ™©Í≥ºÏùò Í¥ÄÎ†®ÏÑ± Î∞è ÏÑ†Î≥Ñ Ïù¥Ïú†"
    },
    ...
    {
      "title": "Ïó¥ Î≤àÏß∏Î°ú Í¥ÄÎ†®ÏÑ± ÎÜíÏùÄ Î∏îÎ°úÍ∑∏ Ï†úÎ™© (10ÏúÑ)",
      "relevance_reason": "ÌÉÄÍ≤ü Ï†úÎ™©Í≥ºÏùò Í¥ÄÎ†®ÏÑ± Î∞è ÏÑ†Î≥Ñ Ïù¥Ïú†"
    }
  ],
  "selected_videos": [${hasYouTubeData ? `
    {
      "title": "ÌÉÄÍ≤ü Ï†úÎ™©Í≥º Í∞ÄÏû• Í¥ÄÎ†®ÏÑ± ÎÜíÏùÄ YouTube Ï†úÎ™© (1ÏúÑ)",
      "relevance_reason": "ÏûêÎßâ Ï∂îÏ∂ú Ïãú Î∏îÎ°úÍ∑∏ ÏûëÏÑ±Ïóê ÎèÑÏõÄÎê† Ïù¥Ïú†"
    },
    ...
    {
      "title": "Ïó¥ Î≤àÏß∏Î°ú Í¥ÄÎ†®ÏÑ± ÎÜíÏùÄ YouTube Ï†úÎ™© (10ÏúÑ)",
      "relevance_reason": "ÏûêÎßâ Ï∂îÏ∂ú Ïãú Î∏îÎ°úÍ∑∏ ÏûëÏÑ±Ïóê ÎèÑÏõÄÎê† Ïù¥Ïú†"
    }` : ''}
  ]
}

Î∞òÎìúÏãú ÌÉÄÍ≤ü Ï†úÎ™© "${request.targetTitle}"Í≥ºÏùò Í¥ÄÎ†®ÎèÑÎ•º Í∏∞Ï§ÄÏúºÎ°ú 1ÏúÑÎ∂ÄÌÑ∞ 10ÏúÑÍπåÏßÄ ÏàúÏÑúÎ•º Îß§Í≤®ÏÑú Î∞òÌôòÌï¥Ï£ºÏÑ∏Ïöî.`;
  }

  private parseIntegratedResult(
    content: string, 
    originalBlogs: CollectedBlogData[], 
    originalVideos: CollectedYouTubeData[]
  ): BlogSelectionResult {
    try {
      // JSON Ï∂îÏ∂ú
      const jsonMatch = content.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        const jsonData = JSON.parse(jsonMatch[0]);
        
        // Î∏îÎ°úÍ∑∏ ÏÑ†Î≥Ñ Ï≤òÎ¶¨
        let selectedTitles: SelectedBlogTitle[] = [];
        if (jsonData.selected_blogs && Array.isArray(jsonData.selected_blogs)) {
          console.log(`üéØ AIÍ∞Ä ÏÑ†Î≥ÑÌïú Î∏îÎ°úÍ∑∏ ${jsonData.selected_blogs.length}Í∞ú Ï≤òÎ¶¨ ÏãúÏûë`);
          
          selectedTitles = jsonData.selected_blogs.slice(0, 10).map((item: any, aiIndex: number) => {
            console.log(`\nüîç [${aiIndex + 1}] AI ÏÑ†Î≥Ñ Î∏îÎ°úÍ∑∏: "${item.title}"`);
            
            // Ï†úÎ™©ÏúºÎ°ú ÏõêÎ≥∏ Î∏îÎ°úÍ∑∏ Ï∞æÍ∏∞
            let originalBlog = originalBlogs.find(blog => blog.title === item.title);
            
            if (!originalBlog) {
              originalBlog = originalBlogs.find(blog => 
                blog.title.includes(item.title) || item.title.includes(blog.title)
              );
            }
            
            if (!originalBlog && originalBlogs.length > 0) {
              const index = Math.min(originalBlogs.length - 1, aiIndex);
              originalBlog = originalBlogs[index];
            }
            
            const url = originalBlog?.url || '';
            
            return {
              title: item.title,
              url: url,
              relevanceReason: item.relevance_reason || 'ÏÑ†Î≥ÑÎê®'
            };
          }).filter((blog: SelectedBlogTitle) => !!blog.url);
        }

        // YouTube ÏÑ†Î≥Ñ Ï≤òÎ¶¨
        let selectedVideos: SelectedYouTubeVideo[] = [];
        if (jsonData.selected_videos && Array.isArray(jsonData.selected_videos)) {
          console.log(`üéØ AIÍ∞Ä ÏÑ†Î≥ÑÌïú YouTube ${jsonData.selected_videos.length}Í∞ú Ï≤òÎ¶¨ ÏãúÏûë`);
          
          selectedVideos = jsonData.selected_videos.slice(0, 10).map((item: any, aiIndex: number) => {
            console.log(`\nüì∫ [${aiIndex + 1}] AI ÏÑ†Î≥Ñ YouTube: "${item.title}"`);
            
            // Ï†úÎ™©ÏúºÎ°ú ÏõêÎ≥∏ ÎπÑÎîîÏò§ Ï∞æÍ∏∞
            let originalVideo = originalVideos.find(video => video.title === item.title);
            
            if (!originalVideo) {
              originalVideo = originalVideos.find(video => 
                video.title.includes(item.title) || item.title.includes(video.title)
              );
            }
            
            if (!originalVideo && originalVideos.length > 0) {
              const index = Math.min(originalVideos.length - 1, aiIndex);
              originalVideo = originalVideos[index];
            }
            
            if (!originalVideo) {
              console.warn(`‚ö†Ô∏è YouTube Îß§Ïπ≠ Ïã§Ìå®: "${item.title}"`);
              return null;
            }
            
            return {
              videoId: originalVideo.videoId,
              title: item.title,
              channelName: originalVideo.channelName,
              viewCount: originalVideo.viewCount,
              duration: originalVideo.duration,
              priority: originalVideo.priority,
              relevanceReason: item.relevance_reason || 'ÏÑ†Î≥ÑÎê®'
            };
          }).filter((video: SelectedYouTubeVideo | null): video is SelectedYouTubeVideo => video !== null);
        }

        console.log(`‚úÖ ÏµúÏ¢Ö ÏÑ†Î≥Ñ ÏôÑÎ£å: Î∏îÎ°úÍ∑∏ ${selectedTitles.length}Í∞ú, YouTube ${selectedVideos.length}Í∞ú`);
        
        return { 
          selectedTitles,
          selectedVideos 
        };
      }
    } catch (error) {
      console.warn('ÌÜµÌï© ÏÑ†Î≥Ñ Í≤∞Í≥º JSON ÌååÏã± Ïã§Ìå®:', error);
    }
    
    // ÌååÏã± Ïã§Ìå® Ïãú ÏÉÅÏúÑ 10Í∞úÏî© Î∞òÌôò
    return {
      selectedTitles: originalBlogs.slice(0, 10).map((blog) => ({
        title: blog.title,
        url: blog.url,
        relevanceReason: 'ÏûêÎèô ÏÑ†Î≥Ñ (ÌååÏã± Ïã§Ìå®)'
      })),
      selectedVideos: originalVideos.slice(0, 10).map((video) => ({
        videoId: video.videoId,
        title: video.title,
        channelName: video.channelName,
        viewCount: video.viewCount,
        duration: video.duration,
        priority: video.priority,
        relevanceReason: 'ÏûêÎèô ÏÑ†Î≥Ñ (ÌååÏã± Ïã§Ìå®)'
      }))
    };
  }
}